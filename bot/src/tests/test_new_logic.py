#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞:
- /start —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç /help
- /get_trial –≤—ã–¥–∞–µ—Ç —Ç—Ä–∏–∞–ª
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.handlers.handlers import start, get_trial, help_command
from unittest.mock import AsyncMock, MagicMock

class MockUpdate:
    def __init__(self, user_id=12345, chat_id=12345, language_code="ru"):
        self.effective_user = MagicMock()
        self.effective_user.id = user_id
        self.effective_user.language_code = language_code
        self.effective_chat = MagicMock()
        self.effective_chat.id = chat_id
        self.message = MagicMock()
        self.message.reply_text = AsyncMock()

class MockContext:
    def __init__(self):
        pass

async def test_start_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start...")
    
    update = MockUpdate()
    context = MockContext()
    
    # –ú–æ–∫–∞–µ–º help_command
    original_help = help_command
    help_command_mock = AsyncMock()
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º help_command
    import src.handlers.handlers
    src.handlers.handlers.help_command = help_command_mock
    
    try:
        await start(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ help_command –±—ã–ª –≤—ã–∑–≤–∞–Ω
        if help_command_mock.called:
            print("‚úÖ /start —É—Å–ø–µ—à–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç /help")
        else:
            print("‚ùå /start –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç /help")
            
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        src.handlers.handlers.help_command = original_help

async def test_get_trial_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /get_trial"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /get_trial...")
    
    update = MockUpdate()
    context = MockContext()
    
    # –ú–æ–∫–∞–µ–º get_user_subscription –∏ activate_trial
    from src.handlers.handlers import get_user_subscription, activate_trial
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    print("  üìã –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    # –ú–æ–∫–∞–µ–º get_user_subscription –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None
    original_get_sub = get_user_subscription
    original_activate = activate_trial
    
    get_user_subscription_mock = AsyncMock(return_value=None)
    activate_trial_mock = AsyncMock(return_value="test_token_123")
    
    import src.handlers.handlers
    src.handlers.handlers.get_user_subscription = get_user_subscription_mock
    src.handlers.handlers.activate_trial = activate_trial_mock
    
    try:
        await get_trial(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
        if get_user_subscription_mock.called and activate_trial_mock.called:
            print("  ‚úÖ /get_trial —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            print("  ‚ùå /get_trial –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç—Ä–∏–∞–ª")
            
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        src.handlers.handlers.get_user_subscription = original_get_sub
        src.handlers.handlers.activate_trial = original_activate

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞...\n")
    
    await test_start_command()
    print()
    await test_get_trial_command()
    
    print("\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main()) 