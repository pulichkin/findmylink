#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ API –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ API
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "api"))


async def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        from api.config import config

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   Redis URL: {config.REDIS_URL}")
        print(f"   Bot Token: {config.BOT_TOKEN[:20]}...")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def test_redis_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –º–µ–Ω–µ–¥–∂–µ—Ä"""
    try:
        from api.utils.redis_manager import redis_manager

        print("‚úÖ Redis –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connected = await redis_manager._ensure_connection()
        if connected:
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False


async def test_jwt_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º JWT –º–µ–Ω–µ–¥–∂–µ—Ä"""
    try:
        from api.utils.jwt_utils import jwt_manager

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        test_user_id = 12345
        token = jwt_manager.create_user_token(test_user_id)
        print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {token[:20]}...")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        decoded_user_id = jwt_manager.get_user_id_from_token(token)
        if decoded_user_id == test_user_id:
            print("‚úÖ JWT —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω")
        else:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT: –æ–∂–∏–¥–∞–ª–æ—Å—å {test_user_id}, –ø–æ–ª—É—á–µ–Ω–æ {decoded_user_id}"
            )
            return False

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JWT –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False


async def test_database_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from api.utils.database import db_manager

        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        conn = db_manager.get_sync_connection()
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_auth_decorator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        from api.utils.jwt_utils import jwt_manager
        from api.utils.redis_manager import redis_manager

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        test_user_id = 12345
        token = jwt_manager.create_user_token(test_user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
        decoded_user_id = jwt_manager.get_user_id_from_token(token)
        if decoded_user_id != test_user_id:
            print("‚ùå JWT –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        stored_user_id = await redis_manager.get_token_user(token)
        if stored_user_id is not None and stored_user_id != test_user_id:
            print("‚ùå Redis –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False

        print("‚úÖ –õ–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ API...")
    print("=" * 50)

    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("Redis –º–µ–Ω–µ–¥–∂–µ—Ä", test_redis_manager),
        ("JWT –º–µ–Ω–µ–¥–∂–µ—Ä", test_jwt_manager),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_manager),
        ("–õ–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", test_auth_decorator),
    ]

    results = []
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))

    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1

    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(
            "   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install aiosqlite multipart"
        )
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ REDIS_URL")
        print("   3. API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
