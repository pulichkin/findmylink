#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ API
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "api"))


async def test_database_syntax():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ aiosqlite"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        import importlib.util

        spec = importlib.util.spec_from_file_location(
            "database",
            os.path.join(os.path.dirname(__file__), "api", "utils", "database.py"),
        )
        importlib.util.module_from_spec(spec)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        with open(
            os.path.join(os.path.dirname(__file__), "api", "utils", "database.py"), "r"
        ) as f:
            code = f.read()
            compile(code, "database.py", "exec")

        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
    except SyntaxError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ –∫–æ–¥–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_database_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        from api.utils.database import DatabaseManager

        db_manager = DatabaseManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
        required_methods = [
            "get_subscription",
            "update_subscription",
            "get_promo_code",
            "mark_promo_used",
            "add_promo_attempt",
            "get_promo_attempts_count",
            "init_database",
            "get_sync_connection",
        ]

        for method in required_methods:
            if not hasattr(db_manager, method):
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥: {method}")
                return False

        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_context_manager_pattern():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    try:
        with open(
            os.path.join(os.path.dirname(__file__), "api", "utils", "database.py"), "r"
        ) as f:
            code = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if "async with aiosqlite.connect(" not in code:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ aiosqlite")
            return False

        if "async with db.execute(" not in code:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è execute")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if "await self.get_connection()" in code:
            print("‚ùå –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω get_connection()")
            return False

        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)

    tests = [
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞", test_database_syntax),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", test_database_structure),
        ("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã", test_context_manager_pattern),
    ]

    results = []
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))

    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1

    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
        print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ aiosqlite: pip install aiosqlite")
        print("   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        print("   3. –ü—Ä–æ–±–ª–µ–º–∞ —Å 'threads can only be started once' —Ä–µ—à–µ–Ω–∞")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
